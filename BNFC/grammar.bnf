

PDefs.   Program ::= [Def] ;
terminator Def ";" ;

comment "//" ;
comment "/*" "*/" ;

DStruct.   Def ::= "struct" TypeID "{" [LetDecl] "}" ;
DEnum.     Def ::= "enum" TypeID "{" [SumType] "}" ;
DLetl.     Def ::= LetAss ;

separator SumType "," ;
EEmpty.    SumType ::= Id ;
EProd.     SumType ::= TypeID "(" [TypeDecl] ")" ;

SLetDecl.  Stmt ::= LetDecl;
SLetAss.   Stmt ::= LetAss;
SAss.      Stmt ::= Id "=" Expr ;
SWhile.    Stmt ::= "while" Expr "{" [Stmt] "}" ;
SRet.      Stmt ::= "return" Expr;
SExpr.     Stmt ::= Expr;
terminator Stmt ";" ;

LetDeclar. LetDecl ::= "let" Id ":" TypeDecl ;
terminator LetDecl ";" ;

LetAssgn.  LetAss  ::= LetDecl "=" Expr ;

ProdPorj.  PostFix ::= "." Expr ;
Deref.     PostFix ::= ">" ;

Postfix.   Expr15 ::= Expr14 PostFix ;
Closure.   Expr14 ::= [Id] "{" [Stmt] "}" ;
FApp.      Expr13 ::= Id "(" [Expr] ")" ;
IdExpr.    Expr13 ::= Id ;
EInt.      Expr13 ::= Integer ;
EDouble.   Expr13 ::= Double ;
ETrue.     Expr13 ::= "true" ;
EFalse.    Expr13 ::= "false" ;
ETimes.    Expr12 ::= Expr12 "*"  Expr13 ;
EDiv.      Expr12 ::= Expr12 "/"  Expr13 ;
EPlus.     Expr11 ::= Expr11 "+"  Expr12 ;
EMinus.    Expr11 ::= Expr11 "-"  Expr12 ;
ELt.       Expr9  ::= Expr9  "<"  Expr10 ;
EGt.       Expr9  ::= Expr9  ">"  Expr10 ;
ELtEq.     Expr9  ::= Expr9  "<=" Expr10 ;
EGtWq.     Expr9  ::= Expr9  ">=" Expr10 ;
EEq.       Expr8  ::= Expr8  "==" Expr9 ;
ENEq.      Expr8  ::= Expr8  "!=" Expr9 ;
EAnd.      Expr4  ::= Expr4  "&&" Expr5 ;
EOr.       Expr3  ::= Expr3  "||" Expr4 ;
separator Expr "," ;
coercions Expr 15 ;

IfExpr.  Expr ::= "if" Expr "then" Expr "else" Expr ;

terminator Stmt "" ;

MutMod. TypeMod ::= "~" ;
PtrMod. TypeMod ::= ">" ;
terminator TypeMod "" ;

position token TypeID (upper (letter | digit | '_')*) ;
token Id (lower (letter | digit | '_')*) ;
terminator Id "";

TVoid.     TypeTkn ::= "void" ;
TUnit.     TypeTkn ::= "()";
TID.       TypeTkn ::= TypeID ;


ModTpe.    TypeDecl ::= [TypeMod] TypeTkn ;
FunType.   TypeDecl ::= "(" [TypeDecl] "->" TypeDecl ")" ;

separator TypeDecl "," ;

