{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print TypeID where
  prt _ (TypeID (_,i)) = doc (showString ( i))


instance Print Id where
  prt _ (Id i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])


instance Print Program where
  prt i e = case e of
    PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DStruct typeid letdecls -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 typeid, doc (showString "{"), prt 0 letdecls, doc (showString "}")])
    DEnum typeid sumtypes -> prPrec i 0 (concatD [doc (showString "enum"), prt 0 typeid, doc (showString "{"), prt 0 sumtypes, doc (showString "}")])
    DLetl letass -> prPrec i 0 (concatD [prt 0 letass])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print SumType where
  prt i e = case e of
    EEmpty id -> prPrec i 0 (concatD [prt 0 id])
    EProd typeid typedecls -> prPrec i 0 (concatD [prt 0 typeid, doc (showString "("), prt 0 typedecls, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stmt where
  prt i e = case e of
    SLetDecl letdecl -> prPrec i 0 (concatD [prt 0 letdecl])
    SLetAss letass -> prPrec i 0 (concatD [prt 0 letass])
    SAss id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
    SWhile expr stmts -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SRet expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr])
    SExpr expr -> prPrec i 0 (concatD [prt 0 expr])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print LetDecl where
  prt i e = case e of
    LetDeclar id typedecl -> prPrec i 0 (concatD [doc (showString "let"), prt 0 id, doc (showString ":"), prt 0 typedecl])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print LetAss where
  prt i e = case e of
    LetAssgn letdecl expr -> prPrec i 0 (concatD [prt 0 letdecl, doc (showString "="), prt 0 expr])

instance Print PostFix where
  prt i e = case e of
    ProdPorj expr -> prPrec i 0 (concatD [doc (showString "."), prt 0 expr])
    Deref -> prPrec i 0 (concatD [doc (showString ">")])

instance Print Expr where
  prt i e = case e of
    Postfix expr postfix -> prPrec i 15 (concatD [prt 14 expr, prt 0 postfix])
    Closure ids stmts -> prPrec i 14 (concatD [prt 0 ids, doc (showString "{"), prt 0 stmts, doc (showString "}")])
    FApp id exprs -> prPrec i 13 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    IdExpr id -> prPrec i 13 (concatD [prt 0 id])
    EInt n -> prPrec i 13 (concatD [prt 0 n])
    EDouble d -> prPrec i 13 (concatD [prt 0 d])
    ETrue -> prPrec i 13 (concatD [doc (showString "true")])
    EFalse -> prPrec i 13 (concatD [doc (showString "false")])
    ETimes expr1 expr2 -> prPrec i 12 (concatD [prt 12 expr1, doc (showString "*"), prt 13 expr2])
    EDiv expr1 expr2 -> prPrec i 12 (concatD [prt 12 expr1, doc (showString "/"), prt 13 expr2])
    EPlus expr1 expr2 -> prPrec i 11 (concatD [prt 11 expr1, doc (showString "+"), prt 12 expr2])
    EMinus expr1 expr2 -> prPrec i 11 (concatD [prt 11 expr1, doc (showString "-"), prt 12 expr2])
    ELt expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString "<"), prt 10 expr2])
    EGt expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString ">"), prt 10 expr2])
    ELtEq expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString "<="), prt 10 expr2])
    EGtWq expr1 expr2 -> prPrec i 9 (concatD [prt 9 expr1, doc (showString ">="), prt 10 expr2])
    EEq expr1 expr2 -> prPrec i 8 (concatD [prt 8 expr1, doc (showString "=="), prt 9 expr2])
    ENEq expr1 expr2 -> prPrec i 8 (concatD [prt 8 expr1, doc (showString "!="), prt 9 expr2])
    EAnd expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "&&"), prt 5 expr2])
    EOr expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "||"), prt 4 expr2])
    IfExpr expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeMod where
  prt i e = case e of
    MutMod -> prPrec i 0 (concatD [doc (showString "~")])
    PtrMod -> prPrec i 0 (concatD [doc (showString ">")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print TypeTkn where
  prt i e = case e of
    TVoid -> prPrec i 0 (concatD [doc (showString "void")])
    TUnit -> prPrec i 0 (concatD [doc (showString "()")])
    TID typeid -> prPrec i 0 (concatD [prt 0 typeid])

instance Print Space where
  prt i e = case e of
    TReservedWhitespace -> prPrec i 0 (concatD [doc (showString "!#!")])

instance Print TypeDecl where
  prt i e = case e of
    ModTpe typemods typetkn -> prPrec i 0 (concatD [prt 0 typemods, prt 0 typetkn])
    FunType typedecls typedecl -> prPrec i 0 (concatD [doc (showString "("), prt 0 typedecls, doc (showString "->"), prt 0 typedecl, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

