-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListSumType ListSumType
%name pSumType SumType
%name pStmt Stmt
%name pListStmt ListStmt
%name pLetDecl LetDecl
%name pListLetDecl ListLetDecl
%name pLetAss LetAss
%name pPostFix PostFix
%name pExpr15 Expr15
%name pExpr14 Expr14
%name pExpr13 Expr13
%name pExpr12 Expr12
%name pExpr11 Expr11
%name pExpr9 Expr9
%name pExpr8 Expr8
%name pExpr4 Expr4
%name pExpr3 Expr3
%name pListExpr ListExpr
%name pExpr Expr
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr5 Expr5
%name pExpr6 Expr6
%name pExpr7 Expr7
%name pExpr10 Expr10
%name pTypeMod TypeMod
%name pListTypeMod ListTypeMod
%name pListId ListId
%name pTypeTkn TypeTkn
%name pSpace Space
%name pTypeDecl TypeDecl
%name pListTypeDecl ListTypeDecl
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!#!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  '()' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '->' { PT _ (TS _ 11) }
  '.' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ':' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '<' { PT _ (TS _ 16) }
  '<=' { PT _ (TS _ 17) }
  '=' { PT _ (TS _ 18) }
  '==' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  '>=' { PT _ (TS _ 21) }
  'else' { PT _ (TS _ 22) }
  'enum' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'if' { PT _ (TS _ 25) }
  'let' { PT _ (TS _ 26) }
  'return' { PT _ (TS _ 27) }
  'struct' { PT _ (TS _ 28) }
  'then' { PT _ (TS _ 29) }
  'true' { PT _ (TS _ 30) }
  'void' { PT _ (TS _ 31) }
  'while' { PT _ (TS _ 32) }
  '{' { PT _ (TS _ 33) }
  '||' { PT _ (TS _ 34) }
  '}' { PT _ (TS _ 35) }
  '~' { PT _ (TS _ 36) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_TypeID { PT _ (T_TypeID _) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
TypeID    :: { TypeID} : L_TypeID { TypeID (mkPosToken $1)}
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsGrammar.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def ';' { flip (:) $1 $2 }
Def :: { Def }
Def : 'struct' TypeID '{' ListLetDecl '}' { AbsGrammar.DStruct $2 (reverse $4) }
    | 'enum' TypeID '{' ListSumType '}' { AbsGrammar.DEnum $2 $4 }
    | LetAss { AbsGrammar.DLetl $1 }
ListSumType :: { [SumType] }
ListSumType : {- empty -} { [] }
            | SumType { (:[]) $1 }
            | SumType ',' ListSumType { (:) $1 $3 }
SumType :: { SumType }
SumType : Id { AbsGrammar.EEmpty $1 }
        | TypeID '(' ListTypeDecl ')' { AbsGrammar.EProd $1 $3 }
Stmt :: { Stmt }
Stmt : LetDecl { AbsGrammar.SLetDecl $1 }
     | LetAss { AbsGrammar.SLetAss $1 }
     | Id '=' Expr { AbsGrammar.SAss $1 $3 }
     | 'while' Expr '{' ListStmt '}' { AbsGrammar.SWhile $2 $4 }
     | 'return' Expr { AbsGrammar.SRet $2 }
     | Expr { AbsGrammar.SExpr $1 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] }
         | Stmt ';' ListStmt { (:) $1 $3 }
         | {- empty -} { [] }
         | Stmt ListStmt { (:) $1 $2 }
LetDecl :: { LetDecl }
LetDecl : 'let' Id ':' TypeDecl { AbsGrammar.LetDeclar $2 $4 }
ListLetDecl :: { [LetDecl] }
ListLetDecl : {- empty -} { [] }
            | ListLetDecl LetDecl ';' { flip (:) $1 $2 }
LetAss :: { LetAss }
LetAss : LetDecl '=' Expr { AbsGrammar.LetAssgn $1 $3 }
PostFix :: { PostFix }
PostFix : '.' Expr { AbsGrammar.ProdPorj $2 }
        | '>' { AbsGrammar.Deref }
Expr15 :: { Expr }
Expr15 : Expr14 PostFix { AbsGrammar.Postfix $1 $2 }
       | '(' Expr ')' { $2 }
Expr14 :: { Expr }
Expr14 : ListId '{' ListStmt '}' { AbsGrammar.Closure $1 $3 }
       | Expr15 { $1 }
Expr13 :: { Expr }
Expr13 : Id '(' ListExpr ')' { AbsGrammar.FApp $1 $3 }
       | Id { AbsGrammar.IdExpr $1 }
       | Integer { AbsGrammar.EInt $1 }
       | Double { AbsGrammar.EDouble $1 }
       | 'true' { AbsGrammar.ETrue }
       | 'false' { AbsGrammar.EFalse }
       | Expr14 { $1 }
Expr12 :: { Expr }
Expr12 : Expr12 '*' Expr13 { AbsGrammar.ETimes $1 $3 }
       | Expr12 '/' Expr13 { AbsGrammar.EDiv $1 $3 }
       | Expr13 { $1 }
Expr11 :: { Expr }
Expr11 : Expr11 '+' Expr12 { AbsGrammar.EPlus $1 $3 }
       | Expr11 '-' Expr12 { AbsGrammar.EMinus $1 $3 }
       | Expr12 { $1 }
Expr9 :: { Expr }
Expr9 : Expr9 '<' Expr10 { AbsGrammar.ELt $1 $3 }
      | Expr9 '>' Expr10 { AbsGrammar.EGt $1 $3 }
      | Expr9 '<=' Expr10 { AbsGrammar.ELtEq $1 $3 }
      | Expr9 '>=' Expr10 { AbsGrammar.EGtWq $1 $3 }
      | Expr10 { $1 }
Expr8 :: { Expr }
Expr8 : Expr8 '==' Expr9 { AbsGrammar.EEq $1 $3 }
      | Expr8 '!=' Expr9 { AbsGrammar.ENEq $1 $3 }
      | Expr9 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 '&&' Expr5 { AbsGrammar.EAnd $1 $3 } | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 '||' Expr4 { AbsGrammar.EOr $1 $3 } | Expr4 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
Expr :: { Expr }
Expr : Expr1 { $1 }
     | 'if' Expr 'then' Expr 'else' Expr { AbsGrammar.IfExpr $2 $4 $6 }
Expr1 :: { Expr }
Expr1 : Expr2 { $1 }
Expr2 :: { Expr }
Expr2 : Expr3 { $1 }
Expr5 :: { Expr }
Expr5 : Expr6 { $1 }
Expr6 :: { Expr }
Expr6 : Expr7 { $1 }
Expr7 :: { Expr }
Expr7 : Expr8 { $1 }
Expr10 :: { Expr }
Expr10 : Expr11 { $1 }
TypeMod :: { TypeMod }
TypeMod : '~' { AbsGrammar.MutMod } | '>' { AbsGrammar.PtrMod }
ListTypeMod :: { [TypeMod] }
ListTypeMod : {- empty -} { [] }
            | ListTypeMod TypeMod { flip (:) $1 $2 }
ListId :: { [Id] }
ListId : {- empty -} { [] } | Id ListId { (:) $1 $2 }
TypeTkn :: { TypeTkn }
TypeTkn : 'void' { AbsGrammar.TVoid }
        | '()' { AbsGrammar.TUnit }
        | TypeID { AbsGrammar.TID $1 }
Space :: { Space }
Space : '!#!' { AbsGrammar.TReservedWhitespace }
TypeDecl :: { TypeDecl }
TypeDecl : ListTypeMod TypeTkn { AbsGrammar.ModTpe (reverse $1) $2 }
         | '(' ListTypeDecl '->' TypeDecl ')' { AbsGrammar.FunType $2 $4 }
ListTypeDecl :: { [TypeDecl] }
ListTypeDecl : {- empty -} { [] }
             | TypeDecl { (:[]) $1 }
             | TypeDecl ',' ListTypeDecl { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

