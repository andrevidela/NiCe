module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTypeID :: TypeID -> Result
transTypeID x = case x of
  TypeID string -> failure x
transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transOperatorSymbol :: OperatorSymbol -> Result
transOperatorSymbol x = case x of
  OperatorSymbol string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DStruct typeid letdecls -> failure x
  DEnum typeid sumtypes -> failure x
  DLetl letass -> failure x
transSumType :: SumType -> Result
transSumType x = case x of
  EEmpty id -> failure x
  EProd typeid typedecls -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SLetDecl letdecl -> failure x
  SLetAss letass -> failure x
  SAss id expr -> failure x
  SWhile expr stmts -> failure x
  SRet expr -> failure x
  SExpr expr -> failure x
transLetDecl :: LetDecl -> Result
transLetDecl x = case x of
  LetDeclar id typedecl -> failure x
transLetAss :: LetAss -> Result
transLetAss x = case x of
  LetAssgn letdecl expr -> failure x
transPostFix :: PostFix -> Result
transPostFix x = case x of
  ProdPorj expr -> failure x
  Deref -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  Postfix expr postfix -> failure x
  Closure ids stmts -> failure x
  FApp id exprs -> failure x
  IdExpr id -> failure x
  EInt integer -> failure x
  EDouble double -> failure x
  ETrue -> failure x
  EFalse -> failure x
  ETimes expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EPlus expr1 expr2 -> failure x
  EMinus expr1 expr2 -> failure x
  ELt expr1 expr2 -> failure x
  EGt expr1 expr2 -> failure x
  ELtEq expr1 expr2 -> failure x
  EGtWq expr1 expr2 -> failure x
  EEq expr1 expr2 -> failure x
  ENEq expr1 expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
  IfExpr expr1 expr2 expr3 -> failure x
transTypeMod :: TypeMod -> Result
transTypeMod x = case x of
  MutMod -> failure x
  PtrMod -> failure x
transTypeTkn :: TypeTkn -> Result
transTypeTkn x = case x of
  TVoid -> failure x
  TUnit -> failure x
  TID typeid -> failure x
transSpace :: Space -> Result
transSpace x = case x of
  TWhitespace -> failure x
transOperator :: Operator -> Result
transOperator x = case x of
  TInfixOp operatorsymbol -> failure x
  TPrefixOp operatorsymbol -> failure x
transOPerator :: OPerator -> Result
transOPerator x = case x of
  TPostfixOp operatorsymbol -> failure x
transTypeDecl :: TypeDecl -> Result
transTypeDecl x = case x of
  ModTpe typemods typetkn -> failure x
  FunType typedecls typedecl -> failure x

